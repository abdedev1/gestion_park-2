import DataLoader from 'dataloader';
import { ImplementableInterfaceRef, InterfaceParam, InterfaceRef, InterfaceTypeOptions, SchemaTypes } from '@pothos/core';
import { DataLoaderOptions } from '../types';
export declare class LoadableInterfaceRef<Types extends SchemaTypes, RefShape, Shape, Key, CacheKey> extends InterfaceRef<RefShape, Shape> {
    getDataloader: (context: Types['Context']) => DataLoader<Key, Shape, CacheKey>;
    constructor(name: string, getDataloader: (context: Types['Context']) => DataLoader<Key, Shape, CacheKey>);
}
export declare class ImplementableLoadableInterfaceRef<Types extends SchemaTypes, RefShape, Shape, Key extends bigint | number | string, CacheKey> extends ImplementableInterfaceRef<Types, RefShape, Shape> {
    cacheResolved: false | ((value: Shape) => Key) | undefined;
    getDataloader: import("@pothos/core").ContextCache<DataLoader<Key, Shape, CacheKey>, object, []>;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string, { loaderOptions, load, toKey, sort, cacheResolved, }: DataLoaderOptions<Types, Shape | Error, Key, CacheKey, Shape>);
    implement<Interfaces extends InterfaceParam<Types>[]>(options: InterfaceTypeOptions<Types, ImplementableInterfaceRef<Types, RefShape, Shape>, Shape, Interfaces>): InterfaceRef<RefShape, Shape>;
}
//# sourceMappingURL=interface.d.ts.map