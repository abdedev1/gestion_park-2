import DataLoader from 'dataloader';
import { ImplementableObjectRef, ObjectRef, SchemaTypes } from '@pothos/core';
import { DataLoaderOptions } from '../types';
export declare class LoadableObjectRef<Types extends SchemaTypes, RefShape, Shape, Key, CacheKey> extends ObjectRef<RefShape, Shape> {
    getDataloader: (context: Types['Context']) => DataLoader<Key, Shape, CacheKey>;
    constructor(name: string, getDataloader: (context: Types['Context']) => DataLoader<Key, Shape, CacheKey>);
}
export declare class ImplementableLoadableObjectRef<Types extends SchemaTypes, RefShape, Shape, Key extends bigint | number | string, CacheKey> extends ImplementableObjectRef<Types, RefShape, Shape> {
    getDataloader: import("@pothos/core").ContextCache<DataLoader<Key, Shape, CacheKey>, object, []>;
    protected cacheResolved: false | ((value: Shape) => Key) | undefined;
    constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string, { loaderOptions, load, toKey, sort, cacheResolved, }: DataLoaderOptions<Types, Shape | Error, Key, CacheKey, Shape>);
}
//# sourceMappingURL=object.d.ts.map