"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PothosDataloaderPlugin: function() {
        return PothosDataloaderPlugin;
    },
    default: function() {
        return _default;
    }
});
require("./global-types");
require("./field-builder");
require("./schema-builder");
const _core = /*#__PURE__*/ _interop_require_wildcard(require("@pothos/core"));
_export_star(require("./refs"), exports);
_export_star(require("./types"), exports);
_export_star(require("./util"), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const pluginName = 'dataloader';
class PothosDataloaderPlugin extends _core.BasePlugin {
    wrapResolve(resolver, fieldConfig) {
        var _config_extensions, _config_extensions1;
        const isList = fieldConfig.type.kind === 'List';
        const config = this.buildCache.getTypeConfig((0, _core.unwrapOutputFieldType)(fieldConfig.type));
        const getDataloader = (_config_extensions = config.extensions) === null || _config_extensions === void 0 ? void 0 : _config_extensions.getDataloader;
        if (!getDataloader) {
            return resolver;
        }
        const cacheResolved = (_config_extensions1 = config.extensions) === null || _config_extensions1 === void 0 ? void 0 : _config_extensions1.cacheResolved;
        function loadIfID(idOrResult, loader) {
            if (idOrResult == null) {
                return idOrResult;
            }
            if ((0, _core.isThenable)(idOrResult)) {
                return idOrResult.then((result)=>loadIfID(result, loader));
            }
            switch(typeof idOrResult){
                case 'number':
                case 'bigint':
                case 'string':
                    return loader.load(idOrResult);
                default:
                    if (cacheResolved) {
                        const key = cacheResolved(idOrResult);
                        loader.prime(key, idOrResult);
                    }
                    return idOrResult;
            }
        }
        if (isList) {
            return (parent, args, context, info)=>{
                const loader = getDataloader(context);
                const promiseOrResults = resolver(parent, args, context, info);
                if ((0, _core.isThenable)(promiseOrResults)) {
                    return promiseOrResults.then((results)=>results === null || results === void 0 ? void 0 : results.map((item)=>loadIfID(item, loader)));
                }
                return promiseOrResults === null || promiseOrResults === void 0 ? void 0 : promiseOrResults.map((item)=>loadIfID(item, loader));
            };
        }
        return (parent, args, context, info)=>loadIfID(resolver(parent, args, context, info), getDataloader(context));
    }
}
_core.default.registerPlugin(pluginName, PothosDataloaderPlugin);
const _default = pluginName;

//# sourceMappingURL=index.js.map