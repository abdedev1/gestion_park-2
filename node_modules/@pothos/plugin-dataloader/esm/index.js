import './global-types.js';
import './field-builder.js';
import './schema-builder.js';
import SchemaBuilder, { BasePlugin, isThenable, unwrapOutputFieldType } from '@pothos/core';
export * from './refs/index.js';
export * from './types.js';
export * from './util.js';
const pluginName = "dataloader";
export class PothosDataloaderPlugin extends BasePlugin {
    wrapResolve(resolver, fieldConfig) {
        var _config_extensions, _config_extensions1;
        const isList = fieldConfig.type.kind === "List";
        const config = this.buildCache.getTypeConfig(unwrapOutputFieldType(fieldConfig.type));
        const getDataloader = (_config_extensions = config.extensions) === null || _config_extensions === void 0 ? void 0 : _config_extensions.getDataloader;
        if (!getDataloader) {
            return resolver;
        }
        const cacheResolved = (_config_extensions1 = config.extensions) === null || _config_extensions1 === void 0 ? void 0 : _config_extensions1.cacheResolved;
        function loadIfID(idOrResult, loader) {
            if (idOrResult == null) {
                return idOrResult;
            }
            if (isThenable(idOrResult)) {
                return idOrResult.then((result) => loadIfID(result, loader));
            }
            switch (typeof idOrResult) {
                case "number":
                case "bigint":
                case "string":
                    return loader.load(idOrResult);
                default:
                    if (cacheResolved) {
                        const key = cacheResolved(idOrResult);
                        loader.prime(key, idOrResult);
                    }
                    return idOrResult;
            }
        }
        if (isList) {
            return (parent, args, context, info) => {
                const loader = getDataloader(context);
                const promiseOrResults = resolver(parent, args, context, info);
                if (isThenable(promiseOrResults)) {
                    return promiseOrResults.then((results) => results === null || results === void 0 ? void 0 : results.map((item) => loadIfID(item, loader)));
                }
                return promiseOrResults === null || promiseOrResults === void 0 ? void 0 : promiseOrResults.map((item) => loadIfID(item, loader));
            };
        }
        return (parent, args, context, info) => loadIfID(resolver(parent, args, context, info), getDataloader(context));
    }
}
SchemaBuilder.registerPlugin(pluginName, PothosDataloaderPlugin);
export default pluginName;
//# sourceMappingURL=index.js.map
