import DataLoader, { Options } from 'dataloader';
import { GraphQLResolveInfo } from 'graphql';
import { MaybePromise, SchemaTypes } from '@pothos/core';
export declare function rejectErrors<T>(val: MaybePromise<readonly (Error | T)[]>): MaybePromise<(Promise<T> | T)[]>;
export declare function loadAndSort<K, V, C, LoadResult, Args = never>(load: (keys: K[], context: C, args: Args) => MaybePromise<LoadResult>, toKey: false | ((val: V) => K) | undefined): ((keys: K[], context: C, args: Args) => MaybePromise<LoadResult>) | ((keys: K[], context: C, args: Args) => Promise<(V | null)[]>);
export declare function dataloaderGetter<K, V, C>(loaderOptions: Options<K, V, C> | undefined, load: (keys: K[], context: SchemaTypes["Context"]) => Promise<readonly (Error | V)[]>, toKey: ((val: V) => K) | undefined, sort: boolean | ((val: V) => K) | undefined): import("@pothos/core").ContextCache<DataLoader<K, V, C>, object, [
]>;
export declare function pathDataloaderGetter<K, V, C, Args>(loaderOptions: Options<K, V, C> | undefined, load: (keys: K[], context: SchemaTypes["Context"], args: Args) => Promise<readonly (Error | V)[]>, toKey: ((val: V) => K) | undefined, sort: boolean | ((val: V) => K) | undefined, byPath?: boolean): (args: Args, ctx: SchemaTypes["Context"], info: GraphQLResolveInfo) => DataLoader<K, V, C>;
export declare function cacheKey(path: GraphQLResolveInfo["path"] | undefined): string;
//# sourceMappingURL=util.d.ts.map
