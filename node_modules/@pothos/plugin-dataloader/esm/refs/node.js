function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
import { completeValue } from '@pothos/core';
import { ImplementableLoadableObjectRef } from './object.js';
export class ImplementableLoadableNodeRef extends ImplementableLoadableObjectRef {
    constructor(builder, name, { id, ...options }) {
        super(builder, name, options);
        _define_property(this, "parseId", void 0);
        _define_property(this, "idOptions", void 0);
        this.idOptions = id;
        this.parseId = id.parse;
        this.builder.configStore.onTypeConfig(this, (config) => {
            var _this_builder_options_relayOptions;
            const nodeInterface = this.builder.nodeInterfaceRef();
            // eslint-disable-next-line no-param-reassign
            config.pothosOptions.loadManyWithoutCache = (ids, context) => this.getDataloader(context).loadMany(ids);
            const { interfaces } = config;
            if (!interfaces.includes(nodeInterface)) {
                interfaces.push(nodeInterface);
            }
            var _this_builder_options_relayOptions_idFieldName;
            this.builder.objectField(this, (_this_builder_options_relayOptions_idFieldName = (_this_builder_options_relayOptions = this.builder.options.relayOptions) === null || _this_builder_options_relayOptions === void 0 ? void 0 : _this_builder_options_relayOptions.idFieldName) !== null && _this_builder_options_relayOptions_idFieldName !== void 0 ? _this_builder_options_relayOptions_idFieldName : "id", (t) => {
                var _this_builder_options_relayOptions;
                return t.globalID({
                    ...(_this_builder_options_relayOptions = this.builder.options.relayOptions) === null || _this_builder_options_relayOptions === void 0 ? void 0 : _this_builder_options_relayOptions.idFieldOptions,
                    ...this.idOptions,
                    nullable: false,
                    args: {},
                    resolve: (parent, args, context, info) => completeValue(this.idOptions.resolve(parent, args, context, info), (globalId) => ({
                        type: config.name,
                        id: globalId
                    }))
                });
            });
        });
    }
}
//# sourceMappingURL=node.js.map
