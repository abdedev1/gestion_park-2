import { defaultTypeResolver } from 'graphql';
import SchemaBuilder, { completeValue, createContextCache, getTypeBrand, InputObjectRef, ObjectRef, PothosValidationError, verifyRef } from '@pothos/core';
import { NodeRef } from './node-ref.js';
import { capitalize, resolveNodes } from './utils/index.js';
const schemaBuilderProto = SchemaBuilder.prototype;
const pageInfoRefMap = new WeakMap();
const nodeInterfaceRefMap = new WeakMap();
export const connectionRefs = new WeakMap();
export const globalConnectionFieldsMap = new WeakMap();
schemaBuilderProto.pageInfoRef = function pageInfoRef() {
    if (pageInfoRefMap.has(this)) {
        return pageInfoRefMap.get(this);
    }
    const ref = this.objectRef("PageInfo");
    pageInfoRefMap.set(this, ref);
    const { cursorType = "String", hasNextPageFieldOptions = {}, hasPreviousPageFieldOptions = {}, startCursorFieldOptions = {}, endCursorFieldOptions = {} } = this.options.relayOptions;
    ref.implement({
        ...this.options.relayOptions.pageInfoTypeOptions,
        fields: (t) => ({
            hasNextPage: t.exposeBoolean("hasNextPage", {
                nullable: false,
                ...hasNextPageFieldOptions
            }),
            hasPreviousPage: t.exposeBoolean("hasPreviousPage", {
                nullable: false,
                ...hasPreviousPageFieldOptions
            }),
            startCursor: t.expose("startCursor", {
                nullable: true,
                ...startCursorFieldOptions,
                type: cursorType
            }),
            endCursor: t.expose("endCursor", {
                nullable: true,
                ...endCursorFieldOptions,
                type: cursorType
            })
        })
    });
    return ref;
};
schemaBuilderProto.nodeInterfaceRef = function nodeInterfaceRef() {
    var _this_options_relayOptions, _this_options_relayOptions1;
    if (nodeInterfaceRefMap.has(this)) {
        return nodeInterfaceRefMap.get(this);
    }
    const ref = this.interfaceRef("Node");
    nodeInterfaceRefMap.set(this, ref);
    ref.implement({
        resolveType: (value, context, info, graphQLType) => {
            if (!value) {
                return defaultTypeResolver(value, context, info, graphQLType);
            }
            const typeBrand = getTypeBrand(value);
            if (typeBrand) {
                const type = this.configStore.getTypeConfig(typeBrand);
                return type.name;
            }
            try {
                if (typeof value === "object") {
                    // eslint-disable-next-line no-underscore-dangle
                    const typename = value.__typename;
                    if (typename) {
                        return typename;
                    }
                    // eslint-disable-next-line no-underscore-dangle
                    const nodeRef = value.__type;
                    if (nodeRef) {
                        const config = this.configStore.getTypeConfig(nodeRef);
                        if (config) {
                            return config.name;
                        }
                    }
                }
            }
            catch {
                // ignore
            }
            return defaultTypeResolver(value, context, info, graphQLType);
        },
        ...this.options.relayOptions.nodeTypeOptions,
        fields: (t) => {
            var _this_options_relayOptions, _this_options_relayOptions1;
            var _this_options_relayOptions_idFieldName;
            return {
                [(_this_options_relayOptions_idFieldName = (_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : _this_options_relayOptions.idFieldName) !== null && _this_options_relayOptions_idFieldName !== void 0 ? _this_options_relayOptions_idFieldName : "id"]: t.globalID({
                    ...(_this_options_relayOptions1 = this.options.relayOptions) === null || _this_options_relayOptions1 === void 0 ? void 0 : _this_options_relayOptions1.idFieldOptions,
                    nullable: false,
                    resolve: (parent) => {
                        throw new PothosValidationError("id field not implemented");
                    }
                })
            };
        }
    });
    const nodeQueryOptions = (_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : _this_options_relayOptions.nodeQueryOptions;
    if (nodeQueryOptions !== false) {
        const resolveNodeFn = nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : nodeQueryOptions.resolve;
        this.queryField("node", (t) => {
            var _nodeQueryOptions_args, _nodeQueryOptions_args_id, _nodeQueryOptions_args1;
            return t.field({
                nullable: true,
                ...this.options.relayOptions.nodeQueryOptions,
                type: ref,
                args: {
                    id: t.arg.globalID({
                        ...nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : (_nodeQueryOptions_args = nodeQueryOptions.args) === null || _nodeQueryOptions_args === void 0 ? void 0 : _nodeQueryOptions_args.id,
                        required: true,
                        extensions: {
                            relayGlobalIDAlwaysParse: true,
                            ...nodeQueryOptions === null || nodeQueryOptions === void 0 ? void 0 : (_nodeQueryOptions_args1 = nodeQueryOptions.args) === null || _nodeQueryOptions_args1 === void 0 ? void 0 : (_nodeQueryOptions_args_id = _nodeQueryOptions_args1.id) === null || _nodeQueryOptions_args_id === void 0 ? void 0 : _nodeQueryOptions_args_id.extensions
                        }
                    })
                },
                resolve: resolveNodeFn ? (root, args, context, info) => resolveNodeFn(root, args, context, info, (ids) => completeValue(resolveNodes(this, context, info, [
                    args.id
                ]), (nodes) => nodes[0])) : (root, args, context, info) => completeValue(resolveNodes(this, context, info, [
                    args.id
                ]), (nodes) => nodes[0])
            });
        });
    }
    const nodesQueryOptions = (_this_options_relayOptions1 = this.options.relayOptions) === null || _this_options_relayOptions1 === void 0 ? void 0 : _this_options_relayOptions1.nodesQueryOptions;
    if (nodesQueryOptions !== false) {
        const resolveNodesFn = nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : nodesQueryOptions.resolve;
        this.queryField("nodes", (t) => {
            var _nodesQueryOptions_args, _nodesQueryOptions_args_ids, _nodesQueryOptions_args1;
            return t.field({
                nullable: {
                    list: false,
                    items: true
                },
                ...this.options.relayOptions.nodesQueryOptions,
                type: [
                    ref
                ],
                args: {
                    ids: t.arg.globalIDList({
                        ...nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : (_nodesQueryOptions_args = nodesQueryOptions.args) === null || _nodesQueryOptions_args === void 0 ? void 0 : _nodesQueryOptions_args.ids,
                        required: true,
                        extensions: {
                            relayGlobalIDAlwaysParse: true,
                            ...nodesQueryOptions === null || nodesQueryOptions === void 0 ? void 0 : (_nodesQueryOptions_args1 = nodesQueryOptions.args) === null || _nodesQueryOptions_args1 === void 0 ? void 0 : (_nodesQueryOptions_args_ids = _nodesQueryOptions_args1.ids) === null || _nodesQueryOptions_args_ids === void 0 ? void 0 : _nodesQueryOptions_args_ids.extensions
                        }
                    })
                },
                resolve: resolveNodesFn ? (root, args, context, info) => resolveNodesFn(root, args, context, info, (ids) => resolveNodes(this, context, info, args.ids)) : (root, args, context, info) => resolveNodes(this, context, info, args.ids)
            });
        });
    }
    return ref;
};
schemaBuilderProto.node = function node(param, { interfaces, extensions, id, ...options }, fields) {
    verifyRef(param);
    const interfacesWithNode = () => [
        this.nodeInterfaceRef(),
        ...typeof interfaces === "function" ? interfaces() : interfaces !== null && interfaces !== void 0 ? interfaces : []
    ];
    let nodeName;
    var _options_isTypeOf;
    const ref = this.objectType(param, {
        ...options,
        extensions: {
            ...extensions,
            pothosParseGlobalID: id.parse
        },
        isTypeOf: (_options_isTypeOf = options.isTypeOf) !== null && _options_isTypeOf !== void 0 ? _options_isTypeOf : typeof param === "function" ? (maybeNode, context, info) => {
            if (!maybeNode) {
                return false;
            }
            if (maybeNode instanceof param) {
                return true;
            }
            const proto = Object.getPrototypeOf(maybeNode);
            try {
                if (proto === null || proto === void 0 ? void 0 : proto.constructor) {
                    const config = this.configStore.getTypeConfig(proto.constructor);
                    return config.name === nodeName;
                }
            }
            catch {
                // ignore
            }
            return false;
        } : undefined,
        interfaces: interfacesWithNode
    }, fields);
    this.configStore.onTypeConfig(ref, (nodeConfig) => {
        nodeName = nodeConfig.name;
        var _this_options_relayOptions_idFieldName;
        this.objectField(ref, (_this_options_relayOptions_idFieldName = this.options.relayOptions.idFieldName) !== null && _this_options_relayOptions_idFieldName !== void 0 ? _this_options_relayOptions_idFieldName : "id", (t) => t.globalID({
            nullable: false,
            ...this.options.relayOptions.idFieldOptions,
            ...id,
            args: {},
            resolve: (parent, args, context, info) => // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
             completeValue(id.resolve(parent, args, context, info), (globalId) => ({
                type: nodeConfig.name,
                id: globalId
            }))
        }));
    });
    const nodeRef = new NodeRef(ref.name, {
        parseId: id.parse
    });
    this.configStore.associateRefWithName(nodeRef, ref.name);
    return nodeRef;
};
schemaBuilderProto.globalConnectionField = function globalConnectionField(name, field) {
    this.globalConnectionFields((t) => ({
        [name]: field(t)
    }));
};
schemaBuilderProto.globalConnectionFields = function globalConnectionFields(fields) {
    var _connectionRefs_get;
    const onRef = (ref) => {
        this.configStore.onPrepare(() => {
            const config = this.configStore.getTypeConfig(ref);
            this.objectFields(ref, (t) => {
                const existingFields = this.configStore.getFields(config.name);
                const refs = {};
                for (const [name, field] of Object.entries(fields(t))) {
                    if (!existingFields.has(name)) {
                        refs[name] = field;
                    }
                }
                return refs;
            });
        });
    };
    (_connectionRefs_get = connectionRefs.get(this)) === null || _connectionRefs_get === void 0 ? void 0 : _connectionRefs_get.forEach((ref) => void onRef(ref));
    if (!globalConnectionFieldsMap.has(this)) {
        globalConnectionFieldsMap.set(this, []);
    }
    globalConnectionFieldsMap.get(this).push(onRef);
};
const mutationIdCache = createContextCache(() => new Map());
schemaBuilderProto.relayMutationField = function relayMutationField(fieldName, inputOptionsOrRef, { resolve, args, ...fieldOptions }, { name: payloadName = `${capitalize(fieldName)}Payload`, outputFields, interfaces, ...payloadOptions }) {
    var _this_options_relayOptions;
    const { relayOptions: { clientMutationIdInputOptions = {}, clientMutationIdFieldOptions = {}, mutationInputArgOptions = {} } } = this.options;
    const includeClientMutationId = this.options.relayOptions.clientMutationId !== "omit";
    let inputRef;
    let argName = "input";
    if (!inputOptionsOrRef || inputOptionsOrRef instanceof InputObjectRef) {
        inputRef = inputOptionsOrRef;
    }
    else {
        var _this_options_relayOptions1;
        const { name: inputName = `${capitalize(fieldName)}Input`, argName: argNameFromOptions = "input", inputFields, ...inputOptions } = inputOptionsOrRef;
        argName = argNameFromOptions;
        inputRef = this.inputType(inputName, {
            ...(_this_options_relayOptions1 = this.options.relayOptions) === null || _this_options_relayOptions1 === void 0 ? void 0 : _this_options_relayOptions1.defaultMutationInputTypeOptions,
            ...inputOptions,
            fields: (t) => ({
                ...inputFields(t),
                ...includeClientMutationId ? {
                    clientMutationId: t.id({
                        ...clientMutationIdInputOptions,
                        required: this.options.relayOptions.clientMutationId !== "optional"
                    })
                } : {}
            })
        });
    }
    const payloadRef = this.objectRef(payloadName).implement({
        ...(_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : _this_options_relayOptions.defaultPayloadTypeOptions,
        ...payloadOptions,
        interfaces: interfaces,
        fields: (t) => ({
            ...outputFields(t),
            ...includeClientMutationId ? {
                clientMutationId: t.id({
                    nullable: this.options.relayOptions.clientMutationId === "optional",
                    ...clientMutationIdFieldOptions,
                    resolve: (parent, _args, context, info) => mutationIdCache(context).get(String(info.path.prev.key))
                })
            } : {}
        })
    });
    this.mutationField(fieldName, (t) => t.field({
        ...fieldOptions,
        type: payloadRef,
        args: {
            ...args,
            ...inputRef ? {
                [argName]: t.arg({
                    ...mutationInputArgOptions,
                    type: inputRef,
                    required: true
                })
            } : {}
        },
        resolve: (root, fieldArgs, context, info) => {
            if (inputRef) {
                mutationIdCache(context).set(String(info.path.key), fieldArgs[argName].clientMutationId);
            }
            return resolve(root, fieldArgs, context, info);
        }
    }));
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    return {
        inputType: inputRef,
        payloadType: payloadRef
    };
};
schemaBuilderProto.connectionObject = function connectionObject({ type, name: connectionName, edgesNullable: edgesNullableField, nodeNullable, edgesField, ...connectionOptions }, edgeOptionsOrRef) {
    var _this_options_relayOptions, _globalConnectionFieldsMap_get;
    verifyRef(type);
    const { edgesFieldOptions: { nullable: edgesNullable = {
        items: true,
        list: false
    }, ...edgesFieldOptions } = {}, pageInfoFieldOptions = {} } = this.options.relayOptions;
    const connectionRef = this.objectRef(connectionName);
    const edgeRef = edgeOptionsOrRef instanceof ObjectRef ? edgeOptionsOrRef : this.edgeObject({
        name: `${connectionName.replace(/Connection$/, "")}Edge`,
        ...edgeOptionsOrRef,
        nodeNullable,
        type
    });
    const connectionFields = connectionOptions.fields;
    const { nodesOnConnection } = this.options.relayOptions;
    const edgesNullableOption = edgesNullableField !== null && edgesNullableField !== void 0 ? edgesNullableField : edgesNullable;
    const edgeListNullable = typeof edgesNullableOption === "object" ? edgesNullableOption.list : !!edgesNullableOption;
    const edgeItemsNullable = typeof edgesNullableOption === "object" && "items" in edgesNullableOption ? edgesNullableOption.items : false;
    this.objectType(connectionRef, {
        ...(_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : _this_options_relayOptions.defaultConnectionTypeOptions,
        ...connectionOptions,
        fields: (t) => {
            var _this_options_relayOptions_nodeFieldOptions, _this_options_relayOptions;
            var _ref, _ref1;
            return {
                pageInfo: t.field({
                    nullable: false,
                    ...pageInfoFieldOptions,
                    type: this.pageInfoRef(),
                    resolve: (parent) => parent.pageInfo
                }),
                edges: t.field({
                    nullable: edgesNullableField !== null && edgesNullableField !== void 0 ? edgesNullableField : edgesNullable,
                    ...edgesFieldOptions,
                    ...edgesField,
                    type: [
                        edgeRef
                    ],
                    resolve: (parent) => parent.edges
                }),
                ...nodesOnConnection ? {
                    nodes: t.field({
                        ...typeof nodesOnConnection === "object" ? nodesOnConnection : {},
                        type: [
                            type
                        ],
                        nullable: {
                            list: edgeListNullable,
                            items: (_ref1 = (_ref = edgeItemsNullable !== null && edgeItemsNullable !== void 0 ? edgeItemsNullable : nodeNullable) !== null && _ref !== void 0 ? _ref : (_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : (_this_options_relayOptions_nodeFieldOptions = _this_options_relayOptions.nodeFieldOptions) === null || _this_options_relayOptions_nodeFieldOptions === void 0 ? void 0 : _this_options_relayOptions_nodeFieldOptions.nullable) !== null && _ref1 !== void 0 ? _ref1 : false
                        },
                        resolve: (con) => completeValue(con.edges, (edges) => {
                            var _edges_map;
                            return (_edges_map = edges === null || edges === void 0 ? void 0 : edges.map((e) => e === null || e === void 0 ? void 0 : e.node)) !== null && _edges_map !== void 0 ? _edges_map : edgeListNullable ? null : [];
                        })
                    })
                } : {},
                ...connectionFields === null || connectionFields === void 0 ? void 0 : connectionFields(t)
            };
        }
    });
    if (!connectionRefs.has(this)) {
        connectionRefs.set(this, []);
    }
    connectionRefs.get(this).push(connectionRef);
    (_globalConnectionFieldsMap_get = globalConnectionFieldsMap.get(this)) === null || _globalConnectionFieldsMap_get === void 0 ? void 0 : _globalConnectionFieldsMap_get.forEach((fieldFn) => void fieldFn(connectionRef));
    return connectionRef;
};
schemaBuilderProto.edgeObject = function edgeObject({ type, name: edgeName, nodeNullable: nodeFieldNullable, nodeField, ...edgeOptions }) {
    var _this_options_relayOptions;
    verifyRef(type);
    const { cursorType = "String", cursorFieldOptions = {}, nodeFieldOptions: { nullable: nodeNullable = false, ...nodeFieldOptions } = {} } = this.options.relayOptions;
    const edgeRef = this.objectRef(edgeName);
    const edgeFields = edgeOptions.fields;
    this.objectType(edgeRef, {
        ...(_this_options_relayOptions = this.options.relayOptions) === null || _this_options_relayOptions === void 0 ? void 0 : _this_options_relayOptions.defaultEdgeTypeOptions,
        ...edgeOptions,
        fields: (t) => ({
            node: t.field({
                nullable: nodeFieldNullable !== null && nodeFieldNullable !== void 0 ? nodeFieldNullable : nodeNullable,
                ...nodeFieldOptions,
                ...nodeField,
                type,
                resolve: (parent) => parent.node
            }),
            cursor: t.expose("cursor", {
                nullable: false,
                type: cursorType,
                ...cursorFieldOptions
            }),
            ...edgeFields === null || edgeFields === void 0 ? void 0 : edgeFields(t)
        })
    });
    return edgeRef;
};
//# sourceMappingURL=schema-builder.js.map
