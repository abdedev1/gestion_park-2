import './global-types.js';
import './field-builder.js';
import './input-field-builder.js';
import './schema-builder.js';
import SchemaBuilder, { BasePlugin, createInputValueMapper, mapInputFields } from '@pothos/core';
import { internalDecodeGlobalID } from './utils/internal.js';
export * from './node-ref.js';
export * from './types.js';
export * from './utils/index.js';
const pluginName = "relay";
export default pluginName;
export class PothosRelayPlugin extends BasePlugin {
    wrapResolve(resolver, fieldConfig) {
        const argMappings = mapInputFields(fieldConfig.args, this.buildCache, (inputField) => {
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                var _inputField_extensions1, _inputField_extensions2;
                var _inputField_extensions_relayGlobalIDFor, _ref;
                return (_ref = (_inputField_extensions_relayGlobalIDFor = (_inputField_extensions1 = inputField.extensions) === null || _inputField_extensions1 === void 0 ? void 0 : _inputField_extensions1.relayGlobalIDFor) !== null && _inputField_extensions_relayGlobalIDFor !== void 0 ? _inputField_extensions_relayGlobalIDFor : (_inputField_extensions2 = inputField.extensions) === null || _inputField_extensions2 === void 0 ? void 0 : _inputField_extensions2.relayGlobalIDAlwaysParse) !== null && _ref !== void 0 ? _ref : false;
            }
            return null;
        });
        if (!argMappings) {
            return resolver;
        }
        const argMapper = createInputValueMapper(argMappings, (globalID, mappings, ctx, info) => {
            var _mappings_value;
            return internalDecodeGlobalID(this.builder, String(globalID), ctx, info, (_mappings_value = mappings.value) !== null && _mappings_value !== void 0 ? _mappings_value : false);
        });
        return (parent, args, context, info) => resolver(parent, argMapper(args, undefined, context, info), context, info);
    }
    wrapSubscribe(subscribe, fieldConfig) {
        const argMappings = mapInputFields(fieldConfig.args, this.buildCache, (inputField) => {
            var _inputField_extensions;
            if ((_inputField_extensions = inputField.extensions) === null || _inputField_extensions === void 0 ? void 0 : _inputField_extensions.isRelayGlobalID) {
                var _inputField_extensions1;
                var _inputField_extensions_relayGlobalIDFor;
                return (_inputField_extensions_relayGlobalIDFor = (_inputField_extensions1 = inputField.extensions) === null || _inputField_extensions1 === void 0 ? void 0 : _inputField_extensions1.relayGlobalIDFor) !== null && _inputField_extensions_relayGlobalIDFor !== void 0 ? _inputField_extensions_relayGlobalIDFor : true;
            }
            return null;
        });
        if (!argMappings || !subscribe) {
            return subscribe;
        }
        const argMapper = createInputValueMapper(argMappings, (globalID, mappings, ctx, info) => internalDecodeGlobalID(this.builder, String(globalID), ctx, info, Array.isArray(mappings.value) ? mappings.value : false));
        return (parent, args, context, info) => subscribe(parent, argMapper(args, undefined, context, info), context, info);
    }
}
SchemaBuilder.registerPlugin(pluginName, PothosRelayPlugin);
//# sourceMappingURL=index.js.map
