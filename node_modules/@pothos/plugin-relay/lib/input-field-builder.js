"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _core = require("@pothos/core");
const inputFieldBuilder = _core.InputFieldBuilder.prototype;
inputFieldBuilder.globalIDList = function globalIDList({ for: forTypes, ...options } = {}) {
    var _this;
    var _map;
    return this.idList({
        ...options,
        extensions: {
            ...options.extensions,
            isRelayGlobalID: true,
            relayGlobalIDFor: (_map = (_this = forTypes && (Array.isArray(forTypes) ? forTypes : [
                forTypes
            ])) === null || _this === void 0 ? void 0 : _this.map((type)=>({
                    typename: this.builder.configStore.getTypeConfig(type).name,
                    parseId: 'parseId' in type ? type.parseId : undefined
                }))) !== null && _map !== void 0 ? _map : null
        }
    });
};
inputFieldBuilder.globalID = function globalID({ for: forTypes, ...options } = {}) {
    var _this;
    var _map;
    return this.id({
        ...options,
        extensions: {
            ...options.extensions,
            isRelayGlobalID: true,
            relayGlobalIDFor: (_map = (_this = forTypes && (Array.isArray(forTypes) ? forTypes : [
                forTypes
            ])) === null || _this === void 0 ? void 0 : _this.map((type)=>({
                    typename: this.builder.configStore.getTypeConfig(type).name,
                    parseId: 'parseId' in type ? type.parseId : undefined
                }))) !== null && _map !== void 0 ? _map : null
        }
    });
};
inputFieldBuilder.connectionArgs = function connectionArgs() {
    const { // TODO(breaking) make this default match other cursor fields
    cursorType = 'ID', beforeArgOptions = {}, afterArgOptions = {}, firstArgOptions = {}, lastArgOptions = {} } = this.builder.options.relayOptions;
    return {
        before: this.field({
            ...beforeArgOptions,
            type: cursorType,
            required: false
        }),
        after: this.field({
            ...afterArgOptions,
            type: cursorType,
            required: false
        }),
        first: this.int({
            ...firstArgOptions,
            required: false
        }),
        last: this.int({
            ...lastArgOptions,
            required: false
        })
    };
};

//# sourceMappingURL=input-field-builder.js.map