import { Provider as e, createRequest as r, useQuery as t } from "urql";

export * from "urql";

import * as n from "react";

import { ServerInsertedHTMLContext as a } from "next/navigation";

var o = {
  "&": "\\u0026",
  ">": "\\u003e",
  "<": "\\u003c",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};

var i = /[&><\u2028\u2029]/g;

var u = n.createContext(void 0);

function transportDataToJS(e) {
  return `(window[Symbol.for("urql_transport")] ??= []).push(${function htmlEscapeJsonString(e) {
    return e.replace(i, (e => o[e]));
  }(JSON.stringify(e))})`;
}

var DataHydrationContextProvider = ({nonce: e, children: r}) => {
  var t = n.useRef();
  if ("undefined" == typeof window) {
    if (!t.current) {
      t.current = function buildContext({nonce: e}) {
        var r = {
          isInjecting: !1,
          operationValuesByKey: {},
          RehydrateScript() {
            r.isInjecting = !1;
            if (!Object.keys(r.operationValuesByKey).length) {
              return n.createElement(n.Fragment);
            }
            var t = transportDataToJS({
              rehydrate: {
                ...r.operationValuesByKey
              }
            });
            r.operationValuesByKey = {};
            return n.createElement("script", {
              key: s++,
              nonce: e,
              dangerouslySetInnerHTML: {
                __html: t
              }
            });
          }
        };
        return r;
      }({
        nonce: e
      });
    }
  }
  return n.createElement(u.Provider, {
    value: t.current
  }, r);
};

var s = 0;

var d = n.createContext(void 0);

function UrqlProvider({children: r, ssr: t, client: a, nonce: o}) {
  return n.createElement(e, {
    value: a
  }, n.createElement(d.Provider, {
    value: t
  }, n.createElement(DataHydrationContextProvider, {
    nonce: o
  }, r)));
}

var c = Symbol.for("urql_transport");

function useUrqlValue(e) {
  var r = n.useContext(d);
  var t = function useDataHydrationContext() {
    var e = n.useContext(u);
    var r = n.useContext(a);
    if ("undefined" != typeof window) {
      return;
    }
    if (r && e && !e.isInjecting) {
      e.isInjecting = !0;
      r((() => n.createElement(e.RehydrateScript, {})));
    }
    return e;
  }();
  if (!r) {
    throw new Error('Missing "UrqlProvider" component as a parent or did not pass in an "ssrExchange" to the Provider.');
  }
  if ("undefined" == typeof window) {
    var o = r.extractData();
    if (t && o[e]) {
      var i = o[e];
      var s = {
        ...i,
        extensions: i.extensions ? JSON.parse(i.extensions) : i.extensions,
        data: i.data ? JSON.parse(i.data) : i.data,
        error: i.error
      };
      t.operationValuesByKey[e] = s;
    }
  } else {
    var l = (window[c] || []).find((r => r && r.rehydrate && r.rehydrate[e]));
    if (l) {
      var y = l.rehydrate && l.rehydrate[e];
      if (y) {
        delete l.rehydrate[e];
        r.restoreData({
          [e]: {
            extensions: JSON.stringify(y.extensions),
            data: JSON.stringify(y.data),
            error: y.error
          }
        });
        delete l.rehydrate[e];
      }
    }
  }
}

function useQuery(e) {
  var n = r(e.query, e.variables || {});
  useUrqlValue(n.key);
  var [a, o] = t(e);
  useUrqlValue(n.key);
  return [ a, o ];
}

export { d as SSRContext, UrqlProvider, useQuery };
//# sourceMappingURL=urql-next.mjs.map
