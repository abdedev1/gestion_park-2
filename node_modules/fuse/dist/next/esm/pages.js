var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/next/pages.ts
import * as React from "react";
import {
  Provider,
  createClient,
  fetchExchange,
  ssrExchange
} from "urql";

// src/exchanges/cache.ts
import { cacheExchange as urqlCacheExchange } from "@urql/core";
import { pipe, tap } from "wonka";
var cacheExchange = ({ forward, client: client2, dispatchDebug }) => {
  const cache$ = urqlCacheExchange({ client: client2, dispatchDebug, forward });
  const warned = /* @__PURE__ */ new Set();
  return (ops$) => {
    return pipe(
      cache$(ops$),
      tap((result) => {
        if (false)
          return;
        if (warned.has(result.operation.key))
          return;
        if (result.operation.kind === "mutation" && !result.operation.context.additionalTypenames) {
          Object.entries(result.data).forEach(([key, value]) => {
            if (value != null && typeof value !== "object") {
              warned.add(result.operation.key);
              console.warn(
                `Saw return of type "${typeof value}" for "${key}", returning scalar values can lead to stale cache-entires. Consider using "additionalTypenames" to correctly evict cache-entries affected by this mutation.`
              );
            }
          });
        } else if (result.operation.kind === "query" && !result.operation.context.additionalTypenames) {
          Object.entries(result.data).forEach(([key, value]) => {
            if (value == null) {
              warned.add(result.operation.key);
              console.warn(
                `Saw return value of "null" for "${key}", we aren't able to derive an associated type for this key, this means that a mutation won't be able to evict this query. Consider using "additionalTypenames" to correctly evict this cache-entry.`
              );
            } else if (Array.isArray(value) && value.length === 0) {
              warned.add(result.operation.key);
              console.warn(
                `Saw an empty array for "${key}", we aren't able to derive an associated type for members of this list, this means that a mutation won't be able to evict this query. Consider using "additionalTypenames" to correctly evict this cache-entry.`
              );
            } else if (value != null && typeof value === "object") {
              const data = value;
              if (data.nodes && Array.isArray(data.nodes) && data.nodes.length === 0) {
                warned.add(result.operation.key);
                console.warn(
                  `Saw an empty array for "${key}.nodes", we aren't able to derive an associated type for members of this list, this means that a mutation won't be able to evict this query. Consider using "additionalTypenames" to correctly evict this cache-entry.`
                );
              } else if (data.edges && Array.isArray(data.edges) && data.edges.length === 0) {
                warned.add(result.operation.key);
                console.warn(
                  `Saw an empty array for "${key}.edges", we aren't able to derive an associated type for members of this list, this means that a mutation won't be able to evict this query. Consider using "additionalTypenames" to correctly evict this cache-entry.`
                );
              }
            }
          });
        }
      })
    );
  };
};

// src/next/pages.ts
export * from "urql";
var ssr;
var client = null;
function initGraphQLClient(clientOptions) {
  const isServer = typeof window === "undefined";
  if (isServer || !client) {
    client = createClient(clientOptions);
    client.toJSON = () => null;
  }
  return client;
}
function withGraphQLClient(getClientConfig) {
  return (AppOrPage) => {
    const WithUrql = (_a) => {
      var _b = _a, {
        pageProps,
        urqlClient,
        graphqlState
      } = _b, rest = __objRest(_b, [
        "pageProps",
        "urqlClient",
        "graphqlState"
      ]);
      const urqlServerState = pageProps && pageProps.graphqlState || graphqlState;
      const client2 = React.useMemo(() => {
        if (urqlClient) {
          return urqlClient;
        }
        if (!ssr || typeof window === "undefined") {
          ssr = ssrExchange({
            initialState: urqlServerState,
            isClient: true
          });
        } else if (typeof window === "undefined") {
          ssr.restoreData(urqlServerState);
        }
        const clientConfig = getClientConfig(ssr);
        return initGraphQLClient(__spreadProps(__spreadValues({}, clientConfig), {
          exchanges: clientConfig.exchanges || [
            cacheExchange,
            ssr,
            fetchExchange
          ]
        }));
      }, [urqlClient, urqlServerState]);
      return React.createElement(
        Provider,
        { value: client2 },
        React.createElement(AppOrPage, __spreadProps(__spreadValues({}, rest), {
          pageProps,
          urqlClient: client2
        }))
      );
    };
    const displayName = AppOrPage.displayName || AppOrPage.name || "Component";
    WithUrql.displayName = `withUrqlClient(${displayName})`;
    if (AppOrPage.getLayout) {
      WithUrql.getLayout = AppOrPage.getLayout;
    }
    return WithUrql;
  };
}
export {
  cacheExchange,
  initGraphQLClient,
  withGraphQLClient
};
